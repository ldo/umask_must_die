#!/usr/bin/python3
#+
# Test of the importance of setting a reasonable umask. Odd
# umask values can in particular play havoc with proper
# management of temporary files. tempfile.mkdtemp() already
# guarantees that the created directory will not be accessible
# by anybody but the owner, but it does not make sure that
# the owner actually has access.
#
# This script exercises the concept by creating a temporary
# directory, and then creating a file in that temporary directory,
# writing something to it, closing it, reopening it, trying
# to read back what was written, and then deleting the temporary
# directory, including the file that was created in it.
#
# This version of the script defines a context manager which
# can be used to temporarily change the umask over specific
# sections of code.
#
# You can adjust the behaviour of the script by defining either
# or both of two environment variables:
#
#     SET_UMASK
#         -- set to N or 0 to disable the changing of the umask.
#            Defaults to yes.
#     KEEP_TEMPS
#         -- set to Y or 1 to disable deletion of the temporary
#            directory at the end, so you can inspect its contents.
#            Defaults to no.
#
# And of course you can try these in combination with different values
# for the umask. KEEP_TEMPS lets you confirm that the file and
# directory are created with reasonable modes no matter what, while
# SET_UMASK lets you set a trouble-causing umask, disable the
# restoration of a reasonable one, and watch the script die with an
# error.
#
# If you donâ€™t want to make a change to the umask in your actual shell
# session, put it (and the setting of the environment variables) into
# a subshell by using parentheses, e.g.
#
#     (umask 777; KEEP_TEMPS=1 ./context_manager)
#
# Copyright 2021 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import tempfile
import shutil

#+
# Useful stuff
#-

class ReasonableUmask :
    "This class is a context manager which can be used to" \
    " temporarily change the umask to a reasonable value." \
    " Or you could just use the ensure() classmethod on its own."

    ensure_clear_in_umask = 0o700

    enable = True
      # can be set to False to disable ensure() calls for testing

    @classmethod
    def ensure(celf) :
        "ensures that the umask is set to a reasonable value, namely" \
        " that user always has read+write+execute access to files that" \
        " they create, while leaving the group- and other-access bits" \
        " unchanged. Returns the previous and new umask values, for" \
        " reference."
        oldmask = os.umask(0o077)
          # temporarily set to some safe value
        newmask = oldmask & ~(0, celf.ensure_clear_in_umask)[celf.enable]
        os.umask(newmask)
        return oldmask, newmask
    #end ensure

    def __enter__(self) :
        self.oldmask, self.newmask = self.ensure()
          # also save newmask for user info if needed
        return self
    #end __enter__

    def __exit__(self, exc_type, exc_value, traceback) :
        os.umask(self.oldmask)
    #end __exit__

    @classmethod
    def call(celf, func, *args, **kwargs) :
        "invokes func with the specified args within an instance" \
        " of the context manager."
        with celf() :
            result = func(*args, **kwargs)
        #end with
        return result
    #end call

#end ReasonableUmask

#+
# Mainline
#-

ReasonableUmask.enable = os.getenv("SET_UMASK", "")[:1].upper() not in ("N", "0")
keep_temps = os.getenv("KEEP_TEMPS", "")[:1].upper() in ("Y", "1")
sys.stdout.write("set_umask: %s, keep_temps = %s\n" % (ReasonableUmask.enable, keep_temps))

with ReasonableUmask() :
    temp_dir = tempfile.mkdtemp(prefix = "umask-override-try-")
#end with
sys.stdout.write("created temp dir %s\n" % temp_dir)
subdir1 = os.path.join(temp_dir, "subdir1")
sys.stdout.write("creating dir %s\n" % subdir1)
with ReasonableUmask() :
    os.mkdir(subdir1)
#end with
sys.stdout.write("deleting dir %s\n" % subdir1)
os.rmdir(subdir1)
subdir2 = os.path.join(temp_dir, "subdir2")
sys.stdout.write("creating dir %s\n" % subdir2)
with ReasonableUmask() :
    os.mkdir(subdir2)
#end with
# leave subdir2 behind if keep_temps
tempfilename = os.path.join(temp_dir, "data.dat")
sys.stdout.write("creating file %s\n" % tempfilename)
with ReasonableUmask() :
    outfile = open(tempfilename, "wt")
#end with
outfile.write("some data\n")
outfile.close()
sys.stdout.write("wrote data to %s\n" % tempfilename)
data = open(tempfilename, "rt").read()
sys.stdout.write("data read from %s = %s\n" % (tempfilename, repr(data)))
if not keep_temps :
    shutil.rmtree(temp_dir)
    sys.stdout.write("deleted temp dir %s\n" % temp_dir)
#end if

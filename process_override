#!/usr/bin/python3
#+
# Test of the importance of setting a reasonable umask. Odd
# umask values can in particular play havoc with proper
# management of temporary files. tempfile.mkdtemp() already
# guarantees that the created directory will not be accessible
# by anybody but the owner, but it does not make sure that
# the owner actually has access.
#
# This script exercises the concept by creating a temporary
# directory, and then creating a file in that temporary directory,
# writing something to it, closing it, reopening it, trying
# to read back what was written, and then deleting the temporary
# directory, including the file that was created in it.
#
# You can adjust the behaviour of the script by defining either
# or both of two environment variables:
#
#     SET_UMASK
#         -- set to N or 0 to disable the changing of the umask.
#            Defaults to yes.
#     KEEP_TEMPS
#         -- set to Y or 1 to disable deletion of the temporary
#            directory at the end, so you can inspect its contents.
#            Defaults to no.
#
# And of course you can try these in combination with different values
# for the umask. KEEP_TEMPS lets you confirm that the file and
# directory are created with reasonable modes no matter what, while
# SET_UMASK lets you set a trouble-causing umask, disable the
# restoration of a reasonable one, and watch the script die with an
# error.
#
# If you donâ€™t want to make a change to the umask in your actual shell
# session, put it (and the setting of the environment variables) into
# a subshell by using parentheses, e.g.
#
#     (umask 777; KEEP_TEMPS=1 ./process_override)
#
# Copyright 2021 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import tempfile
import shutil

#+
# Useful stuff
#-

ensure_clear_in_umask = 0o700

def ensure_reasonable_umask() :
    "ensures that the umask is set to a reasonable value, namely" \
    " that user always has read+write+execute access to files that" \
    " they create, while leaving the group- and other-access bits" \
    " unchanged. Returns the previous and new umask values, for" \
    " reference."
    oldmask = os.umask(0o077)
      # temporarily set to some safe value
    newmask = oldmask & ~ensure_clear_in_umask
    os.umask(newmask)
    return oldmask, newmask
#end ensure_reasonable_umask

#+
# Mainline
#-

set_umask = os.getenv("SET_UMASK", "")[:1].upper() not in ("N", "0")
keep_temps = os.getenv("KEEP_TEMPS", "")[:1].upper() in ("Y", "1")
sys.stdout.write("set_umask: %s, keep_temps = %s\n" % (set_umask, keep_temps))

if set_umask :
    oldmask, newmask = ensure_reasonable_umask()
    sys.stdout.write("umask %#0.3o => %#0.3o\n" % (oldmask, newmask))
#end if

temp_dir = tempfile.mkdtemp(prefix = "umask-try-")
sys.stdout.write("created temp dir %s\n" % temp_dir)
tempfilename = os.path.join(temp_dir, "data.dat")
sys.stdout.write("creating file %s\n" % tempfilename)
outfile = open(tempfilename, "wt")
outfile.write("some data\n")
outfile.close()
sys.stdout.write("wrote data to %s\n" % tempfilename)
data = open(tempfilename, "rt").read()
sys.stdout.write("data read from %s = %s\n" % (tempfilename, repr(data)))
if not keep_temps :
    shutil.rmtree(temp_dir)
    sys.stdout.write("deleted temp dir %s\n" % temp_dir)
#end if
